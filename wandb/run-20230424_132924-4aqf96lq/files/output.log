TRAINING DATA: n=100
size of input for one sample: torch.Size([6, 128, 128])
size of output (labels) for one sample: torch.Size([96])
Number of covariates = 6
Number of species = 96
VALIDATION: n=100
in_shape=torch.Size([6, 128, 128])
out_shape=torch.Size([80]), n_species=80
MODEL: cnn(
  (conv1): Conv2d(6, 32, kernel_size=(3, 3), stride=(1, 1))
  (act1): ReLU()
  (pool1): MaxPool2d(kernel_size=3, stride=3, padding=0, dilation=1, ceil_mode=False)
  (drop1): Dropout(p=0.3, inplace=False)
  (conv2): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1))
  (act2): ReLU()
  (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (flat): Flatten(start_dim=1, end_dim=-1)
  (fc4): Linear(in_features=3200, out_features=96, bias=True)
  (act4): ReLU()
)
EPOCH 0
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:01<00:00,  1.37s/it]
Traceback (most recent call last):
  File "/home/nina/Documents/GeoLifeCLEF/simple_cnn.py", line 100, in <module>
    val_loss = loss_fn(y_pred, labels)
  File "/home/nina/miniconda3/envs/glc23/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/nina/miniconda3/envs/glc23/lib/python3.9/site-packages/torch/nn/modules/loss.py", line 720, in forward
    return F.binary_cross_entropy_with_logits(input, target,
  File "/home/nina/miniconda3/envs/glc23/lib/python3.9/site-packages/torch/nn/functional.py", line 3163, in binary_cross_entropy_with_logits
    raise ValueError("Target size ({}) must be the same as input size ({})".format(target.size(), input.size()))
ValueError: Target size (torch.Size([100, 80])) must be the same as input size (torch.Size([100, 96]))
LOSS:  tensor(0.7287, dtype=torch.float64)